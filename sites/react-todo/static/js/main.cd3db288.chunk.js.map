{"version":3,"sources":["TodoList.module.css","components/TodoForm/TodoForm.module.css","components/Todo/Todo.module.css","components/TodoForm/TodoForm.jsx","components/Todo/Todo.jsx","TodoList.js","serviceWorker.js","index.js"],"names":["module","exports","TodoForm","state","text","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","className","s","wrapper","this","onChange","type","placeholder","onClick","React","Component","item","style","background","todo","color","toggleComplete","onDelete","TodoList","todos","todoToShow","toggleAllComplete","addTodo","map","updataTodoToShow","removeAllTodoThatAreComplete","filter","handelDeleteTodo","app","title","small","container","buttons","animation","length","list","Todo","key","bottomControl","separator","some","toggle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd3db288.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"TodoList_app__2_aJq\",\"title\":\"TodoList_title__22D62\",\"small\":\"TodoList_small__2rWrk\",\"todo_list\":\"TodoList_todo_list__3gJJ7\",\"container\":\"TodoList_container__18w46\",\"buttons\":\"TodoList_buttons__3KzSJ\",\"todos\":\"TodoList_todos__FsDg9\",\"blinking\":\"TodoList_blinking__3ITxT\",\"list\":\"TodoList_list__H1otF\",\"bottomControl\":\"TodoList_bottomControl__2jSY_\",\"separator\":\"TodoList_separator__12rmY\",\"toggle\":\"TodoList_toggle__1Gssc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoForm_wrapper__1_aLz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Todo_item__23Wym\"};","import React from 'react';\r\nimport shortid from 'shortid'\r\nimport s from './TodoForm.module.css';\r\n\r\nexport  default  class TodoForm extends  React.Component {\r\n\tstate = {\r\n\t\ttext: ''\r\n\t}\r\n\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({\r\n\t\t\t[e.target.name]: e.target.value\r\n\t\t})\r\n\t}\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault()\r\n\t\tthis.props.onSubmit({\r\n\t\t\tid: shortid.generate(),\r\n\t\t\ttext: this.state.text,\r\n\t\t\tcomplete: false\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\ttext: \"\"\r\n\t\t})\r\n\t}\r\n\r\n render () {\r\n\t return (\r\n\t\t <div className={s.wrapper}>\r\n\t\t\t <form onSubmit={this.handleSubmit}>\r\n\t\t\t\t <input\r\n\t\t\t\t\t name=\"text\"\r\n\t\t\t\t\t value={this.state.text}\r\n\t\t\t\t\t onChange={this.handleChange}\r\n\t\t\t\t\t type=\"text\"\r\n\t\t\t\t\t placeholder=\"what is to do?\"\r\n\t\t\t\t />\r\n\t\t\t\t <button onClick={this.handleSubmit}>Add</button>\r\n\t\t\t </form>\r\n\t\t </div>\r\n\t )\r\n }\r\n}\r\n","import React from \"react\";\r\nimport s from './Todo.module.css';\r\n\r\nexport default (props) => {\r\n\treturn (\r\n\t\t<li className={s.item}>\r\n\t\t\t<p\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tbackground: props.todo.complete ? \"#2ECC71\" : \"\",\r\n\t\t\t\t\tcolor: props.todo.complete ? \"#fff\" : \"\"\r\n\t\t\t\t}}\r\n\t\t\t\tonClick={props.toggleComplete}\r\n\t\t\t>\r\n\t\t\t\t{props.todo.text}\r\n\t\t\t</p>\r\n\t\t\t<button onClick={props.onDelete}>del</button>\r\n\t\t</li>\r\n\t)\r\n}\r\n","import React from 'react';\nimport s from './TodoList.module.css';\nimport TodoForm from \"./components/TodoForm/TodoForm\";\nimport Todo from \"./components/Todo/Todo\";\n\nexport default class TodoList extends React.Component {\n\n\tstate = {\n\t\ttodos: [],\n\t\ttodoToShow: 'all',\n\t\ttoggleAllComplete: true,\n\t}\n\n\taddTodo = todo => {\n\t\tthis.setState ({\n\t\t\ttodos: [todo, ...this.state.todos]\n\t\t})\n\t}\n\n\ttoggleComplete = id => {\n\t\tthis.setState ({\n\t\t\ttodos: this.state.todos.map (todo => {\n\t\t\t\tif (todo.id === id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...todo,\n\t\t\t\t\t\tcomplete: !todo.complete\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn todo\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\tupdataTodoToShow = s => {\n\t\tthis.setState ({\n\t\t\ttodoToShow: s\n\t\t})\n\t}\n\n\tremoveAllTodoThatAreComplete = () => {\n\t\tthis.setState ({\n\t\t\ttodos: this.state.todos.filter (todo => !todo.complete)\n\t\t})\n\t}\n\thandelDeleteTodo = id => {\n\t\tthis.setState ({\n\t\t\ttodos: this.state.todos.filter (todo => todo.id !== id)\n\t\t})\n\t}\n\n\trender () {\n\n\t\tlet todos = []\n\n\t\tif (this.state.todoToShow === \"all\") {\n\t\t\ttodos = this.state.todos\n\t\t} else if (this.state.todoToShow === \"active\") {\n\t\t\ttodos = this.state.todos.filter (todo => !todo.complete)\n\t\t} else if (this.state.todoToShow === \"complete\") {\n\t\t\ttodos = this.state.todos.filter (todo => todo.complete)\n\t\t}\n\n\t\treturn (\n\t\t\t<section className={s.app}>\n\t\t\t\t<h1 className={s.title}>\n\t\t\t\t\t<small className={s.small}>#</small>\n\t\t\t\t\tTodo list\n\t\t\t\t</h1>\n\t\t\t\t<div className={s.container}>\n\t\t\t\t\t<TodoForm onSubmit={this.addTodo}/>\n\t\t\t\t\t<div className={s.buttons}>\n\t\t\t\t\t\t<button onClick={() => this.updataTodoToShow (\"all\")}>all</button>\n\t\t\t\t\t\t<button onClick={() => this.updataTodoToShow (\"active\")}>active</button>\n\t\t\t\t\t\t<button onClick={() => this.updataTodoToShow (\"complete\")}>complete</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={s.todos}>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tTodos left :\n\t\t\t\t\t\t\t<small style={{\n\t\t\t\t\t\t\t\tanimation: this.state.todos.filter (todo => !todo.complete).length === 0 ? \"blinking\" : \"\",\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t{this.state.todos.filter (todo => !todo.complete).length}\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<ul className={s.list}>\n\t\t\t\t\t\t\t{todos.map (todo => (\n\t\t\t\t\t\t\t\t<Todo\n\t\t\t\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\t\t\t\ttoggleComplete={() => this.toggleComplete (todo.id)}\n\t\t\t\t\t\t\t\t\tonDelete={() => this.handelDeleteTodo (todo.id)}\n\t\t\t\t\t\t\t\t\ttodo={todo}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<div className={s.bottomControl}>\n\t\t\t\t\t\t\t<div className={s.separator}></div>\n\t\t\t\t\t\t\t{ this.state.todos.some(todo => todo.complete)\n\t\t\t\t\t\t\t\t\t? <button onClick={this.removeAllTodoThatAreComplete}>Delete all complete</button>\n\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={s.toggle}\n\t\t\t\t\t\t\t\tonClick={() => this.setState({\n\t\t\t\t\t\t\t\t\ttodos : this.state.todos.map(todo => ({\n\t\t\t\t\t\t\t\t\t\t...todo,\n\t\t\t\t\t\t\t\t\t\tcomplete: this.state.toggleAllComplete\n\t\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\t\ttoggleAllComplete: !this.state.toggleAllComplete\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tToggle all : {`${this.state.toggleAllComplete}`}</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t)\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './TodoList';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}